import db from "../client";
import { habits } from "../schemas/habits.schema";
import { entries } from "../schemas/entries.schema";
import { entryHabits } from "../schemas/entryHabits.schema";
import { user } from "../schemas/user.schema";

// Sample data for habits
const habitData = [
  {
    name: "M√©ditation",
    description: "M√©diter 10 minutes par jour",
    emoji: "üßò",
  },
  {
    name: "Exercice",
    description: "Faire du sport ou de l'exercice",
    emoji: "üèÉ",
  },
  {
    name: "Lecture",
    description: "Lire au moins 15 minutes",
    emoji: "üìö",
  },
];

// Sample thoughts for journal entries
const sampleThoughts = [
  "Excellente journ√©e aujourd'hui, tr√®s productive",
  "Je me sens un peu fatigu√© mais satisfait",
  "Belle journ√©e ensoleill√©e, √ßa fait du bien",
  "R√©union importante au travail, plut√¥t stressante",
  "Weekend relaxant avec la famille",
  "Nouvelle d√©couverte culinaire aujourd'hui",
  "Journ√©e pluvieuse mais cosy √† la maison",
  "Accomplissement personnel, fier de moi",
  "Moment difficile mais j'ai pers√©v√©r√©",
  "Bonne soir√©e entre amis",
  "Apprentissage d'une nouvelle comp√©tence",
  "Balade en nature tr√®s ressour√ßante",
  "Journ√©e charg√©e mais enrichissante",
  "Petit moment de solitude appr√©ci√©",
  "Challenge relev√© avec succ√®s",
  "Temps de qualit√© avec mes proches",
  "D√©couverte d'un nouveau lieu inspirant",
  "R√©flexion profonde sur mes objectifs",
  "Moment de gratitude pour ce que j'ai",
  "√ânergie positive contagieuse aujourd'hui",
  "S√©ance de yoga matinale tr√®s relaxante",
  "Conversation inspirante avec un mentor",
  "Projet cr√©atif avanc√© aujourd'hui",
  "Moment de m√©ditation profonde",
  "Sortie culturelle enrichissante",
  "Cours en ligne passionnant termin√©",
  "Aide apport√©e √† une personne dans le besoin",
  "Recette maison r√©ussie pour la premi√®re fois",
  "Appel t√©l√©phonique r√©confortant avec un ami",
  "Promenade matinale revigorante",
  "S√©ance de jardinage th√©rapeutique",
  "Film documentaire captivant regard√©",
  "Atelier cr√©atif tr√®s stimulant",
  "Moment de lecture captivante",
  "D√©couverte d'un caf√© cosy en ville",
  "Session de brainstorming productive",
  "Exercice de respiration apaisant",
  "Visite de mus√©e culturellement enrichissante",
  "Pr√©paration d'un cadeau fait main",
  "Observation des √©toiles contemplative",
  "Randonn√©e en montagne ressour√ßante",
  "S√©ance de photographie cr√©ative",
  "Cours de danse amusant et √©nergisant",
  "Moment de journaling introspectif",
  "Pr√©paration d'un repas healthy",
  "√âcoute de podcast inspirant",
  "S√©ance de stretching relaxante",
  "Temps pass√© avec mon animal de compagnie",
  "R√©organisation de mon espace de travail",
  "Planification de mes objectifs futurs",
];

const moods = ["good", "neutral", "sad"] as const;

// Generate unique dates for the last 50 days
function generateUniqueDates(): string[] {
  const dates = [];
  const today = new Date();

  for (let i = 0; i < 50; i++) {
    const pastDate = new Date(today.getTime() - i * 24 * 60 * 60 * 1000);
    dates.push(pastDate.toISOString().split("T")[0]);
  }

  return dates;
}

// Get random mood
function getRandomMood() {
  return moods[Math.floor(Math.random() * moods.length)];
}

async function seed() {
  try {
    console.log("üå± Starting seed process...");

    // Get existing user (first user found)
    console.log("üì§ Fetching existing user...");
    const existingUsers = await db.select().from(user).limit(1);

    if (existingUsers.length === 0) {
      throw new Error("No existing user found. Please create a user first.");
    }

    const existingUser = existingUsers[0];
    console.log(`‚úÖ Using user: ${existingUser.name} (${existingUser.email})`);

    // Create 3 habits
    console.log("üèÉ Creating habits...");
    const createdHabits = [];

    for (const habit of habitData) {
      const [createdHabit] = await db
        .insert(habits)
        .values({
          userId: existingUser.id,
          name: habit.name,
          description: habit.description,
          emoji: habit.emoji,
        })
        .returning();

      createdHabits.push(createdHabit);
      console.log(`  ‚úÖ Created habit: ${habit.name} ${habit.emoji}`);
    }

    // Generate unique dates
    const uniqueDates = generateUniqueDates();

    // Create 50 journal entries
    console.log("üìî Creating journal entries...");
    const createdEntries = [];

    for (let i = 0; i < 50; i++) {
      const [createdEntry] = await db
        .insert(entries)
        .values({
          userId: existingUser.id,
          date: uniqueDates[i],
          mood: getRandomMood(),
          thought: sampleThoughts[i], // Use unique thought for each entry
        })
        .returning();

      createdEntries.push(createdEntry);

      // Randomly associate some habits with this entry (0 to 3 habits)
      const numHabitsToAssociate = Math.floor(Math.random() * 4); // 0, 1, 2, or 3
      const shuffledHabits = [...createdHabits].sort(() => Math.random() - 0.5);
      const habitsToAssociate = shuffledHabits.slice(0, numHabitsToAssociate);

      for (const habit of habitsToAssociate) {
        await db.insert(entryHabits).values({
          entryId: createdEntry.id,
          habitId: habit.id,
        });
      }

      if (i % 10 === 9) {
        console.log(`  ‚úÖ Created ${i + 1}/50 entries...`);
      }
    }

    console.log("üéâ Seed completed successfully!");
    console.log(`üìä Summary:`);
    console.log(`  - User: ${existingUser.name}`);
    console.log(`  - Habits created: ${createdHabits.length}`);
    console.log(`  - Journal entries created: ${createdEntries.length}`);
  } catch (error) {
    console.error("‚ùå Error during seeding:", error);
    throw error;
  }
}

// Run the seed function
seed()
  .then(() => {
    console.log("‚úÖ Seeding process completed");
    process.exit(0);
  })
  .catch((error) => {
    console.error("‚ùå Seeding failed:", error);
    process.exit(1);
  });
