import { Habit, HabitRepository } from "@/domain/models/habit.interface";
import { HabitEntity } from "@/domain/entities/habit.entity";

export class HabitUseCase {
  constructor(private repository: HabitRepository) {}

  async getUserHabits(
    userId: string
  ): Promise<{ data: Habit[]; error?: Error }> {
    try {
      const result = await this.repository.getUserHabits(userId);
      return result;
    } catch (error) {
      console.error("Error in getUserHabits usecase:", error);
      return { data: [], error: error as Error };
    }
  }

  async createHabit(
    habitData: Omit<Habit, "id">
  ): Promise<{ data: Habit | null; error?: Error }> {
    try {
      // Validate habit data
      const habitEntity = new HabitEntity(
        "", // id will be generated by the repository
        habitData.userId,
        habitData.name,
        habitData.description,
        habitData.emoji
      );

      if (!habitEntity.isValidHabit()) {
        return {
          data: null,
          error: new Error("Invalid habit data"),
        };
      }

      const result = await this.repository.createHabit(habitData);
      return result;
    } catch (error) {
      console.error("Error in createHabit usecase:", error);
      return { data: null, error: error as Error };
    }
  }

  async updateHabit(
    id: string,
    habitData: Partial<Omit<Habit, "id" | "userId">>
  ): Promise<{ data: Habit | null; error?: Error }> {
    try {
      const result = await this.repository.updateHabit(id, habitData);
      return result;
    } catch (error) {
      console.error("Error in updateHabit usecase:", error);
      return { data: null, error: error as Error };
    }
  }

  async deleteHabit(id: string): Promise<{ success: boolean; error?: Error }> {
    try {
      const result = await this.repository.deleteHabit(id);
      return result;
    } catch (error) {
      console.error("Error in deleteHabit usecase:", error);
      return { success: false, error: error as Error };
    }
  }

  async toggleHabitCompletion(
    habitId: string,
    userId: string,
    date: string = new Date().toISOString().split("T")[0]
  ): Promise<{ success: boolean; isCompleted: boolean; error?: Error }> {
    try {
      const result = await this.repository.toggleHabitCompletion(
        habitId,
        userId,
        date
      );
      return result;
    } catch (error) {
      console.error("Error in toggleHabitCompletion usecase:", error);
      return { success: false, isCompleted: false, error: error as Error };
    }
  }

  async getHabitCompletionStatus(
    habitId: string,
    userId: string,
    date: string = new Date().toISOString().split("T")[0]
  ): Promise<{ isCompleted: boolean; error?: Error }> {
    try {
      const result = await this.repository.getHabitCompletionStatus(
        habitId,
        userId,
        date
      );
      return result;
    } catch (error) {
      console.error("Error in getHabitCompletionStatus usecase:", error);
      return { isCompleted: false, error: error as Error };
    }
  }
}
